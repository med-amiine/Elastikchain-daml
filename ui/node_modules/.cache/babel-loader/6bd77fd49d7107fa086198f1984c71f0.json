{"ast":null,"code":"var _jsxFileName = \"/Users/midmoussi/Documents/smart_port/daml-ui-template/ui/src/pages/report/Report.tsx\";\nimport React, { useState } from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport Button from \"@material-ui/core/Button\";\nimport { useStreamQuery, useLedger, useParty } from \"@daml/react\";\nimport { Network } from \"@daml.js/cosmart-0.0.1/lib/Main\";\nimport { InputDialog } from \"./InputDialog\";\nimport useStyles from \"./styles\";\nexport default function Report() {\n  const classes = useStyles();\n  const party = useParty();\n  const ledger = useLedger();\n  const assets = useStreamQuery(Network).contracts;\n  const defaultInviteCustomsMarProps = {\n    open: false,\n    title: \"Invite Customs Mar\",\n    defaultValue: {\n      customsMar: \"\"\n    },\n    fields: {\n      customsMar: {\n        label: \"customs Mar\",\n        type: \"text\"\n      }\n    },\n    // items: [ \"Alice\", \"Bob\" ] } },\n    onClose: async function () {}\n  };\n  const [inviteCustomsMarProps, setInviteCustomsMarProps] = useState(defaultInviteCustomsMarProps); // One can pass the original contracts CreateEvent\n\n  function showInviteCustomsMar(asset) {\n    async function onClose(state) {\n      setInviteCustomsMarProps({ ...defaultInviteCustomsMarProps,\n        open: false\n      }); // if you want to use the contracts payload\n      // if (!state || asset.payload.owner === state.newOwner) return;\n\n      await ledger.exercise(Network.InviteCustomsMar, asset.contractId, state);\n    }\n\n    ;\n    setInviteCustomsMarProps({ ...defaultInviteCustomsMarProps,\n      open: true,\n      onClose\n    });\n  }\n\n  ;\n  const defaultInviteCustomsGuaProps = {\n    open: false,\n    title: \"Invite Customs Mar\",\n    defaultValue: {\n      customsGua: \"\"\n    },\n    fields: {\n      customsGua: {\n        label: \"customs Gua\",\n        type: \"text\"\n      }\n    },\n    onClose: async function () {}\n  };\n  const [inviteCustomsGuaProps, setInviteCustomsGuaProps] = useState(defaultInviteCustomsGuaProps); // One can pass the original contracts CreateEvent\n\n  function showInviteCustomsGua(asset) {\n    async function onClose(state) {\n      setInviteCustomsGuaProps({ ...defaultInviteCustomsGuaProps,\n        open: false\n      });\n      await ledger.exercise(Network.InviteCustomsGua, asset.contractId, state);\n    }\n\n    ;\n    setInviteCustomsGuaProps({ ...defaultInviteCustomsGuaProps,\n      open: true,\n      onClose\n    });\n  }\n\n  ; // type UserSpecifiedAppraise = Pick<Appraise, \"newValue\">;\n  // const today = (new Date()).toISOString().slice(0,10);\n  // const defaultAppraiseProps : InputDialogProps<UserSpecifiedAppraise> = {\n  //   open: false,\n  //   title: \"Appraise Asset\",\n  //   defaultValue: { newValue: \"0\" },\n  //   fields: {\n  //     newValue : {\n  //       label: \"New Value\",\n  //       type: \"number\" }\n  //     },\n  //   onClose: async function() {}\n  // };\n  // const [ appraiseProps, setAppraiseProps ] = useState(defaultAppraiseProps);\n  // // Or can pass just the ContractId of an\n  // function showAppraise(assetContractId : ContractId<Asset>) {\n  //   async function onClose(state : UserSpecifiedAppraise | null) {\n  //     setAppraiseProps({ ...defaultAppraiseProps, open: false});\n  //     if (!state) return;\n  //     const withNewDateOfAppraisal = { ...state, newDateOfAppraisal:today};\n  //     await ledger.exercise(Asset.Appraise, assetContractId, withNewDateOfAppraisal);\n  //   };\n  //   setAppraiseProps({...defaultAppraiseProps, open: true, onClose});\n  // };\n  // type InputFieldsForNewAsset = Omit<Asset, \"issuer\">;\n  // const defaultNewAssetProps : InputDialogProps<InputFieldsForNewAsset> = {\n  //   open: false,\n  //   title: \"New Asset\",\n  //   defaultValue: {\n  //     owner: party,\n  //     name: \"\",\n  //     dateOfAppraisal: today,\n  //     value: \"0\",\n  //   },\n  //   fields: {\n  //     owner: {\n  //       label: \"Owner\",\n  //       type: \"selection\",\n  //       items: [ \"Alice\", \"Bob\" ],\n  //     },\n  //     name: {\n  //       label: \"Name of Asset\",\n  //       type: \"text\"\n  //     },\n  //     dateOfAppraisal: {\n  //       label: \"Date of Appraisal\",\n  //       type: \"date\"\n  //     },\n  //     value: {\n  //       label: \"Value\",\n  //       type: \"number\"\n  //     }\n  //   },\n  //   onClose: async function() {}\n  // };\n  // const [newAssetProps, setNewAssetProps] = useState(defaultNewAssetProps);\n  // function showNewAsset() {\n  //   async function onClose(state : InputFieldsForNewAsset | null) {\n  //     setNewAssetProps({ ...defaultNewAssetProps, open: false});\n  //     if (!state) return;\n  //     const withIssuer = { ...state, issuer:party};\n  //     await ledger.create(Asset, withIssuer);\n  //   };\n  //   setNewAssetProps({...defaultNewAssetProps, open: true, onClose});\n  // };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(InputDialog, Object.assign({}, inviteCustomsMarProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(Table, {\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    className: classes.tableRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    key: 5,\n    className: classes.tableCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, \"options\"))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, assets.map(a => /*#__PURE__*/React.createElement(TableRow, {\n    key: a.contractId,\n    className: classes.tableRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    key: 6,\n    className: classes.tableCellButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    size: \"small\",\n    className: classes.choiceButton,\n    variant: \"contained\",\n    disabled: a.payload.operator !== party,\n    onClick: () => showInviteCustomsMar(a),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }\n  }, \"InviteCustomsMar\")))))), /*#__PURE__*/React.createElement(InputDialog, Object.assign({}, inviteCustomsGuaProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(Table, {\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    className: classes.tableRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    key: 5,\n    className: classes.tableCell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }, \"options\"))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }, assets.map(a => /*#__PURE__*/React.createElement(TableRow, {\n    key: a.contractId,\n    className: classes.tableRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    key: 6,\n    className: classes.tableCellButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    size: \"small\",\n    className: classes.choiceButton,\n    variant: \"contained\",\n    disabled: a.payload.operator !== party,\n    onClick: () => showInviteCustomsGua(a),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 17\n    }\n  }, \"InviteCustomsGua\")))))));\n}","map":{"version":3,"sources":["/Users/midmoussi/Documents/smart_port/daml-ui-template/ui/src/pages/report/Report.tsx"],"names":["React","useState","Table","TableHead","TableRow","TableCell","TableBody","Button","useStreamQuery","useLedger","useParty","Network","InputDialog","useStyles","Report","classes","party","ledger","assets","contracts","defaultInviteCustomsMarProps","open","title","defaultValue","customsMar","fields","label","type","onClose","inviteCustomsMarProps","setInviteCustomsMarProps","showInviteCustomsMar","asset","state","exercise","InviteCustomsMar","contractId","defaultInviteCustomsGuaProps","customsGua","inviteCustomsGuaProps","setInviteCustomsGuaProps","showInviteCustomsGua","InviteCustomsGua","tableRow","tableCell","map","a","tableCellButton","choiceButton","payload","operator"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport Button from \"@material-ui/core/Button\";\nimport Ledger from \"@daml/ledger\";\nimport { useStreamQuery, useLedger, useParty } from \"@daml/react\";\nimport { ContractId } from \"@daml/types\";\nimport { InviteCustomsMar,InviteExporter,InviteImporter,InviteCustomsGua, Network  } from \"@daml.js/cosmart-0.0.1/lib/Main\";\nimport { InputDialog, InputDialogProps } from \"./InputDialog\";\nimport useStyles from \"./styles\";\n\nexport default function Report() {\n  const classes = useStyles();\n  const party = useParty();\n  const ledger : Ledger = useLedger();\n  const assets = useStreamQuery(Network).contracts;\n\n  const defaultInviteCustomsMarProps : InputDialogProps<InviteCustomsMar> = {\n    open: false,\n    title: \"Invite Customs Mar\",\n    defaultValue: { customsMar : \"\" },\n    fields: {\n      customsMar : {\n        label: \"customs Mar\",\n        type: \"text\" }},\n        // items: [ \"Alice\", \"Bob\" ] } },\n    onClose: async function() {}\n  };\n\n  const [ inviteCustomsMarProps, setInviteCustomsMarProps ] = useState(defaultInviteCustomsMarProps);\n  // One can pass the original contracts CreateEvent\n  function showInviteCustomsMar(asset : Network.CreateEvent) {\n    async function onClose(state : InviteCustomsMar | null) {\n      setInviteCustomsMarProps({ ...defaultInviteCustomsMarProps, open: false});\n      // if you want to use the contracts payload\n      // if (!state || asset.payload.owner === state.newOwner) return;\n      await ledger.exercise(Network.InviteCustomsMar, asset.contractId, state);\n    };\n    setInviteCustomsMarProps({ ...defaultInviteCustomsMarProps, open: true, onClose})\n  };\n  \n  const defaultInviteCustomsGuaProps : InputDialogProps<InviteCustomsGua> = {\n    open: false,\n    title: \"Invite Customs Mar\",\n    defaultValue: { customsGua : \"\" },\n    fields: {\n      customsGua : {\n        label: \"customs Gua\",\n        type: \"text\" }},\n    onClose: async function() {}\n  };\n\n  const [ inviteCustomsGuaProps, setInviteCustomsGuaProps ] = useState(defaultInviteCustomsGuaProps);\n  // One can pass the original contracts CreateEvent\n  function showInviteCustomsGua(asset : Network.CreateEvent) {\n    async function onClose(state : InviteCustomsGua | null) {\n      setInviteCustomsGuaProps({ ...defaultInviteCustomsGuaProps, open: false});\n      await ledger.exercise(Network.InviteCustomsGua, asset.contractId, state);\n    };\n    setInviteCustomsGuaProps({ ...defaultInviteCustomsGuaProps, open: true, onClose})\n  };\n\n  // type UserSpecifiedAppraise = Pick<Appraise, \"newValue\">;\n  // const today = (new Date()).toISOString().slice(0,10);\n  // const defaultAppraiseProps : InputDialogProps<UserSpecifiedAppraise> = {\n  //   open: false,\n  //   title: \"Appraise Asset\",\n  //   defaultValue: { newValue: \"0\" },\n  //   fields: {\n  //     newValue : {\n  //       label: \"New Value\",\n  //       type: \"number\" }\n  //     },\n  //   onClose: async function() {}\n  // };\n  // const [ appraiseProps, setAppraiseProps ] = useState(defaultAppraiseProps);\n\n  // // Or can pass just the ContractId of an\n  // function showAppraise(assetContractId : ContractId<Asset>) {\n  //   async function onClose(state : UserSpecifiedAppraise | null) {\n  //     setAppraiseProps({ ...defaultAppraiseProps, open: false});\n  //     if (!state) return;\n  //     const withNewDateOfAppraisal = { ...state, newDateOfAppraisal:today};\n  //     await ledger.exercise(Asset.Appraise, assetContractId, withNewDateOfAppraisal);\n  //   };\n  //   setAppraiseProps({...defaultAppraiseProps, open: true, onClose});\n  // };\n\n  // type InputFieldsForNewAsset = Omit<Asset, \"issuer\">;\n  // const defaultNewAssetProps : InputDialogProps<InputFieldsForNewAsset> = {\n  //   open: false,\n  //   title: \"New Asset\",\n  //   defaultValue: {\n  //     owner: party,\n  //     name: \"\",\n  //     dateOfAppraisal: today,\n  //     value: \"0\",\n  //   },\n  //   fields: {\n  //     owner: {\n  //       label: \"Owner\",\n  //       type: \"selection\",\n  //       items: [ \"Alice\", \"Bob\" ],\n  //     },\n  //     name: {\n  //       label: \"Name of Asset\",\n  //       type: \"text\"\n  //     },\n  //     dateOfAppraisal: {\n  //       label: \"Date of Appraisal\",\n  //       type: \"date\"\n  //     },\n  //     value: {\n  //       label: \"Value\",\n  //       type: \"number\"\n  //     }\n  //   },\n  //   onClose: async function() {}\n  // };\n  // const [newAssetProps, setNewAssetProps] = useState(defaultNewAssetProps);\n  // function showNewAsset() {\n  //   async function onClose(state : InputFieldsForNewAsset | null) {\n  //     setNewAssetProps({ ...defaultNewAssetProps, open: false});\n  //     if (!state) return;\n  //     const withIssuer = { ...state, issuer:party};\n  //     await ledger.create(Asset, withIssuer);\n  //   };\n  //   setNewAssetProps({...defaultNewAssetProps, open: true, onClose});\n  // };\n\n  return (\n    <>\n      <InputDialog { ...inviteCustomsMarProps } />\n      {/* <InputDialog { ...appraiseProps } />\n      <InputDialog { ...newAssetProps } /> */}\n      {/* <Button color=\"primary\" size=\"small\" className={classes.choiceButton} variant=\"contained\" onClick={() => showNewAsset()}>\n        Create New Asset\n      </Button> */}\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow className={classes.tableRow}>\n            {/* <TableCell key={0} className={classes.tableCell}>Issuer</TableCell>\n            <TableCell key={1} className={classes.tableCell}>Owner</TableCell>\n            <TableCell key={2} className={classes.tableCell}>Name</TableCell>\n            <TableCell key={3} className={classes.tableCell}>Value</TableCell>\n            <TableCell key={4} className={classes.tableCell}>DateOfAppraisal</TableCell> */}\n            <TableCell key={5} className={classes.tableCell}>options</TableCell>\n            {/* <TableCell key={6} className={classes.tableCell}>Appraise</TableCell> */}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {assets.map(a => (\n            <TableRow key={a.contractId} className={classes.tableRow}>\n              {/* <TableCell key={0} className={classes.tableCell}>{a.payload.issuer}</TableCell>\n              <TableCell key={1} className={classes.tableCell}>{a.payload.owner}</TableCell>\n              <TableCell key={2} className={classes.tableCell}>{a.payload.name}</TableCell>\n              <TableCell key={3} className={classes.tableCell}>{a.payload.value}</TableCell>\n              <TableCell key={4} className={classes.tableCell}>{a.payload.dateOfAppraisal}</TableCell>\n              <TableCell key={5} className={classes.tableCellButton}>\n                <Button color=\"primary\" size=\"small\" className={classes.choiceButton} variant=\"contained\" disabled={a.payload.owner !== party} onClick={() => showGive(a)}>Give</Button>\n              </TableCell> */}\n              <TableCell key={6} className={classes.tableCellButton}>\n                <Button color=\"primary\" size=\"small\" className={classes.choiceButton} variant=\"contained\" disabled={a.payload.operator !== party} onClick={() => showInviteCustomsMar(a)}>InviteCustomsMar</Button>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    \n      <InputDialog { ...inviteCustomsGuaProps } />\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow className={classes.tableRow}>   \n            <TableCell key={5} className={classes.tableCell}>options</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {assets.map(a => (\n            <TableRow key={a.contractId} className={classes.tableRow}>\n              <TableCell key={6} className={classes.tableCellButton}>\n                <Button color=\"primary\" size=\"small\" className={classes.choiceButton} variant=\"contained\" disabled={a.payload.operator !== party} onClick={() => showInviteCustomsGua(a)}>InviteCustomsGua</Button>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}