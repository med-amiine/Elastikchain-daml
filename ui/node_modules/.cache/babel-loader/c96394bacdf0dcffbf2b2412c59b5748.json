{"ast":null,"code":"import _objectSpread from\"/Users/midmoussi/Documents/smart_port/daml-ui-template/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/midmoussi/Documents/smart_port/daml-ui-template/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"/Users/midmoussi/Documents/smart_port/daml-ui-template/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/midmoussi/Documents/smart_port/daml-ui-template/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import React,{useState}from\"react\";import Table from\"@material-ui/core/Table\";import TableHead from\"@material-ui/core/TableHead\";import TableRow from\"@material-ui/core/TableRow\";import TableCell from\"@material-ui/core/TableCell\";import TableBody from\"@material-ui/core/TableBody\";import Button from\"@material-ui/core/Button\";import{useStreamQuery,useLedger,useParty}from\"@daml/react\";import{Network}from\"@daml.js/cosmart-0.0.1/lib/Main\";import{InputDialog}from\"./InputDialog\";import useStyles from\"./styles\";export default function Report(){var classes=useStyles();var party=useParty();var ledger=useLedger();var assets=useStreamQuery(Network).contracts;var defaultInviteCustomsMarProps={open:false,title:\"Invite Customs Mar\",defaultValue:{customsMar:\"\"},fields:{customsMar:{label:\"customs Mar\",type:\"text\"}},// items: [ \"Alice\", \"Bob\" ] } },\nonClose:function(){var _onClose=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:case\"end\":return _context.stop();}}},_callee);}));function onClose(){return _onClose.apply(this,arguments);}return onClose;}()};var _useState=useState(defaultInviteCustomsMarProps),_useState2=_slicedToArray(_useState,2),inviteCustomsMarProps=_useState2[0],setInviteCustomsMarProps=_useState2[1];// One can pass the original contracts CreateEvent\nfunction showInviteCustomsMar(asset){function onClose(_x){return _onClose2.apply(this,arguments);}function _onClose2(){_onClose2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(state){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:setInviteCustomsMarProps(_objectSpread(_objectSpread({},defaultInviteCustomsMarProps),{},{open:false}));// if you want to use the contracts payload\n// if (!state || asset.payload.owner === state.newOwner) return;\n_context2.next=3;return ledger.exercise(Network.InviteCustomsMar,asset.contractId,state);case 3:case\"end\":return _context2.stop();}}},_callee2);}));return _onClose2.apply(this,arguments);};setInviteCustomsMarProps(_objectSpread(_objectSpread({},defaultInviteCustomsMarProps),{},{open:true,onClose:onClose}));};// type UserSpecifiedAppraise = Pick<Appraise, \"newValue\">;\n// const today = (new Date()).toISOString().slice(0,10);\n// const defaultAppraiseProps : InputDialogProps<UserSpecifiedAppraise> = {\n//   open: false,\n//   title: \"Appraise Asset\",\n//   defaultValue: { newValue: \"0\" },\n//   fields: {\n//     newValue : {\n//       label: \"New Value\",\n//       type: \"number\" }\n//     },\n//   onClose: async function() {}\n// };\n// const [ appraiseProps, setAppraiseProps ] = useState(defaultAppraiseProps);\n// // Or can pass just the ContractId of an\n// function showAppraise(assetContractId : ContractId<Asset>) {\n//   async function onClose(state : UserSpecifiedAppraise | null) {\n//     setAppraiseProps({ ...defaultAppraiseProps, open: false});\n//     if (!state) return;\n//     const withNewDateOfAppraisal = { ...state, newDateOfAppraisal:today};\n//     await ledger.exercise(Asset.Appraise, assetContractId, withNewDateOfAppraisal);\n//   };\n//   setAppraiseProps({...defaultAppraiseProps, open: true, onClose});\n// };\n// type InputFieldsForNewAsset = Omit<Asset, \"issuer\">;\n// const defaultNewAssetProps : InputDialogProps<InputFieldsForNewAsset> = {\n//   open: false,\n//   title: \"New Asset\",\n//   defaultValue: {\n//     owner: party,\n//     name: \"\",\n//     dateOfAppraisal: today,\n//     value: \"0\",\n//   },\n//   fields: {\n//     owner: {\n//       label: \"Owner\",\n//       type: \"selection\",\n//       items: [ \"Alice\", \"Bob\" ],\n//     },\n//     name: {\n//       label: \"Name of Asset\",\n//       type: \"text\"\n//     },\n//     dateOfAppraisal: {\n//       label: \"Date of Appraisal\",\n//       type: \"date\"\n//     },\n//     value: {\n//       label: \"Value\",\n//       type: \"number\"\n//     }\n//   },\n//   onClose: async function() {}\n// };\n// const [newAssetProps, setNewAssetProps] = useState(defaultNewAssetProps);\n// function showNewAsset() {\n//   async function onClose(state : InputFieldsForNewAsset | null) {\n//     setNewAssetProps({ ...defaultNewAssetProps, open: false});\n//     if (!state) return;\n//     const withIssuer = { ...state, issuer:party};\n//     await ledger.create(Asset, withIssuer);\n//   };\n//   setNewAssetProps({...defaultNewAssetProps, open: true, onClose});\n// };\nreturn/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(InputDialog,inviteCustomsMarProps),/*#__PURE__*/React.createElement(Table,{size:\"small\"},/*#__PURE__*/React.createElement(TableHead,null,/*#__PURE__*/React.createElement(TableRow,{className:classes.tableRow},/*#__PURE__*/React.createElement(TableCell,{key:5,className:classes.tableCell},\"options\"))),/*#__PURE__*/React.createElement(TableBody,null,assets.map(function(a){return/*#__PURE__*/React.createElement(TableRow,{key:a.contractId,className:classes.tableRow},/*#__PURE__*/React.createElement(TableCell,{key:6,className:classes.tableCellButton},/*#__PURE__*/React.createElement(Button,{color:\"primary\",size:\"small\",className:classes.choiceButton,variant:\"contained\",disabled:a.payload.operator!==party,onClick:function onClick(){return showInviteCustomsMar(a);}},\"InviteCustomsMar\")));}))));}","map":{"version":3,"sources":["/Users/midmoussi/Documents/smart_port/daml-ui-template/ui/src/pages/report/Report.tsx"],"names":["React","useState","Table","TableHead","TableRow","TableCell","TableBody","Button","useStreamQuery","useLedger","useParty","Network","InputDialog","useStyles","Report","classes","party","ledger","assets","contracts","defaultInviteCustomsMarProps","open","title","defaultValue","customsMar","fields","label","type","onClose","inviteCustomsMarProps","setInviteCustomsMarProps","showInviteCustomsMar","asset","state","exercise","InviteCustomsMar","contractId","tableRow","tableCell","map","a","tableCellButton","choiceButton","payload","operator"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport Button from \"@material-ui/core/Button\";\nimport Ledger from \"@daml/ledger\";\nimport { useStreamQuery, useLedger, useParty } from \"@daml/react\";\nimport { ContractId } from \"@daml/types\";\nimport { InviteCustomsMar,InviteExporter,InviteImporter,InviteCustomsGua, Network  } from \"@daml.js/cosmart-0.0.1/lib/Main\";\nimport { InputDialog, InputDialogProps } from \"./InputDialog\";\nimport useStyles from \"./styles\";\n\nexport default function Report() {\n  const classes = useStyles();\n  const party = useParty();\n  const ledger : Ledger = useLedger();\n  const assets = useStreamQuery(Network).contracts;\n\n  const defaultInviteCustomsMarProps : InputDialogProps<InviteCustomsMar> = {\n    open: false,\n    title: \"Invite Customs Mar\",\n    defaultValue: { customsMar : \"\" },\n    fields: {\n      customsMar : {\n        label: \"customs Mar\",\n        type: \"text\" }},\n        // items: [ \"Alice\", \"Bob\" ] } },\n    onClose: async function() {}\n  };\n\n  const [ inviteCustomsMarProps, setInviteCustomsMarProps ] = useState(defaultInviteCustomsMarProps);\n  // One can pass the original contracts CreateEvent\n  function showInviteCustomsMar(asset : Network.CreateEvent) {\n    async function onClose(state : InviteCustomsMar | null) {\n      setInviteCustomsMarProps({ ...defaultInviteCustomsMarProps, open: false});\n      // if you want to use the contracts payload\n      // if (!state || asset.payload.owner === state.newOwner) return;\n      await ledger.exercise(Network.InviteCustomsMar, asset.contractId, state);\n    };\n    setInviteCustomsMarProps({ ...defaultInviteCustomsMarProps, open: true, onClose})\n  };\n\n  // type UserSpecifiedAppraise = Pick<Appraise, \"newValue\">;\n  // const today = (new Date()).toISOString().slice(0,10);\n  // const defaultAppraiseProps : InputDialogProps<UserSpecifiedAppraise> = {\n  //   open: false,\n  //   title: \"Appraise Asset\",\n  //   defaultValue: { newValue: \"0\" },\n  //   fields: {\n  //     newValue : {\n  //       label: \"New Value\",\n  //       type: \"number\" }\n  //     },\n  //   onClose: async function() {}\n  // };\n  // const [ appraiseProps, setAppraiseProps ] = useState(defaultAppraiseProps);\n\n  // // Or can pass just the ContractId of an\n  // function showAppraise(assetContractId : ContractId<Asset>) {\n  //   async function onClose(state : UserSpecifiedAppraise | null) {\n  //     setAppraiseProps({ ...defaultAppraiseProps, open: false});\n  //     if (!state) return;\n  //     const withNewDateOfAppraisal = { ...state, newDateOfAppraisal:today};\n  //     await ledger.exercise(Asset.Appraise, assetContractId, withNewDateOfAppraisal);\n  //   };\n  //   setAppraiseProps({...defaultAppraiseProps, open: true, onClose});\n  // };\n\n  // type InputFieldsForNewAsset = Omit<Asset, \"issuer\">;\n  // const defaultNewAssetProps : InputDialogProps<InputFieldsForNewAsset> = {\n  //   open: false,\n  //   title: \"New Asset\",\n  //   defaultValue: {\n  //     owner: party,\n  //     name: \"\",\n  //     dateOfAppraisal: today,\n  //     value: \"0\",\n  //   },\n  //   fields: {\n  //     owner: {\n  //       label: \"Owner\",\n  //       type: \"selection\",\n  //       items: [ \"Alice\", \"Bob\" ],\n  //     },\n  //     name: {\n  //       label: \"Name of Asset\",\n  //       type: \"text\"\n  //     },\n  //     dateOfAppraisal: {\n  //       label: \"Date of Appraisal\",\n  //       type: \"date\"\n  //     },\n  //     value: {\n  //       label: \"Value\",\n  //       type: \"number\"\n  //     }\n  //   },\n  //   onClose: async function() {}\n  // };\n  // const [newAssetProps, setNewAssetProps] = useState(defaultNewAssetProps);\n  // function showNewAsset() {\n  //   async function onClose(state : InputFieldsForNewAsset | null) {\n  //     setNewAssetProps({ ...defaultNewAssetProps, open: false});\n  //     if (!state) return;\n  //     const withIssuer = { ...state, issuer:party};\n  //     await ledger.create(Asset, withIssuer);\n  //   };\n  //   setNewAssetProps({...defaultNewAssetProps, open: true, onClose});\n  // };\n\n  return (\n    <>\n      <InputDialog { ...inviteCustomsMarProps } />\n      {/* <InputDialog { ...appraiseProps } />\n      <InputDialog { ...newAssetProps } /> */}\n      {/* <Button color=\"primary\" size=\"small\" className={classes.choiceButton} variant=\"contained\" onClick={() => showNewAsset()}>\n        Create New Asset\n      </Button> */}\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow className={classes.tableRow}>\n            {/* <TableCell key={0} className={classes.tableCell}>Issuer</TableCell>\n            <TableCell key={1} className={classes.tableCell}>Owner</TableCell>\n            <TableCell key={2} className={classes.tableCell}>Name</TableCell>\n            <TableCell key={3} className={classes.tableCell}>Value</TableCell>\n            <TableCell key={4} className={classes.tableCell}>DateOfAppraisal</TableCell> */}\n            <TableCell key={5} className={classes.tableCell}>options</TableCell>\n            {/* <TableCell key={6} className={classes.tableCell}>Appraise</TableCell> */}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {assets.map(a => (\n            <TableRow key={a.contractId} className={classes.tableRow}>\n              {/* <TableCell key={0} className={classes.tableCell}>{a.payload.issuer}</TableCell>\n              <TableCell key={1} className={classes.tableCell}>{a.payload.owner}</TableCell>\n              <TableCell key={2} className={classes.tableCell}>{a.payload.name}</TableCell>\n              <TableCell key={3} className={classes.tableCell}>{a.payload.value}</TableCell>\n              <TableCell key={4} className={classes.tableCell}>{a.payload.dateOfAppraisal}</TableCell>\n              <TableCell key={5} className={classes.tableCellButton}>\n                <Button color=\"primary\" size=\"small\" className={classes.choiceButton} variant=\"contained\" disabled={a.payload.owner !== party} onClick={() => showGive(a)}>Give</Button>\n              </TableCell> */}\n              <TableCell key={6} className={classes.tableCellButton}>\n                <Button color=\"primary\" size=\"small\" className={classes.choiceButton} variant=\"contained\" disabled={a.payload.operator !== party} onClick={() => showInviteCustomsMar(a)}>InviteCustomsMar</Button>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}